openapi: 3.0.3
info:
  title: Stock Broker API
  description: |
    REST API for a stock broker platform â€” registration, KYC, trading (Market, Limit, Stop, OCO),
    deposits/withdrawals, reporting, security and compliance.
  version: "1.0.0"

servers:
  - url: https://api.example-broker.com/v1
    description: Production server
  - url: https://sandbox.example-broker.com/v1
    description: Sandbox / testing server

tags:
  - name: Auth
    description: Registration, login, 2FA and password recovery
  - name: Users
    description: User profile and KYC
  - name: Accounts
    description: Trading accounts, balances, deposits and withdrawals
  - name: Orders
    description: Create and manage trading orders
  - name: Markets
    description: Market data and exchanges
  - name: Portfolio
    description: Positions and portfolio view
  - name: Transactions
    description: Transaction history (trades, deposits, withdrawals)
  - name: Reports
    description: Account statements and tax reports
  - name: Admin
    description: Administrative and compliance endpoints
  - name: Webhooks
    description: External callbacks (exchange, clearing)
  - name: Notifications
    description: User notifications and alerts

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Machine-readable error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          additionalProperties: true
      example:
        code: invalid_request
        message: "Request payload is invalid"
        details:
          field: email
          reason: "email must be a valid email address"

    RegisterRequest:
      type: object
      required: [firstName, lastName, email, password, country]
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          description: Minimum 8 characters, include number and special character
        phone:
          type: string
        country:
          type: string
          description: ISO 2-letter code
        accountType:
          type: string
          enum: [retail, professional, institutional]
          default: retail

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
          example: Bearer
        expiresIn:
          type: integer
      example:
        accessToken: "eyJhbGciOi..."
        refreshToken: "rftok_abcdef..."
        tokenType: "Bearer"
        expiresIn: 3600

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    TwoFARequest:
      type: object
      required: [userId, method]
      properties:
        userId:
          type: string
        method:
          type: string
          enum: [sms, email, authenticator]
        phone:
          type: string
          description: Required for sms method

    TwoFAVerifyRequest:
      type: object
      required: [userId, code]
      properties:
        userId:
          type: string
        code:
          type: string
          description: OTP code

    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required: [token, newPassword]
      properties:
        token:
          type: string
        newPassword:
          type: string
          format: password

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        country:
          type: string
        accountType:
          type: string
        kycStatus:
          type: string
          enum: [not_submitted, pending, verified, rejected]
        roles:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
      example:
        id: "11111111-aaaa-4444-bbbb-222222222222"
        firstName: "Jan"
        lastName: "Novak"
        email: "jan.novak@example.com"
        phone: "+420601234567"
        country: "CZ"
        accountType: "retail"
        kycStatus: "verified"
        roles: ["user"]
        createdAt: "2025-09-30T12:00:00Z"

    KYCSubmission:
      type: object
      required: [identityDocumentType, identityDocumentId]
      properties:
        identityDocumentType:
          type: string
          enum: [id_card, passport, driver_license]
        identityDocumentId:
          type: string
        addressProofType:
          type: string
          enum: [utility_bill, bank_statement, other]
        addressProofId:
          type: string
        method:
          type: string
          enum: [upload, video_identification]
        metadata:
          type: object
          additionalProperties: true

    KYCStatusResponse:
      type: object
      properties:
        kycStatus:
          type: string
          enum: [not_submitted, pending, verified, rejected]
        lastUpdate:
          type: string
          format: date-time
      example:
        kycStatus: pending
        lastUpdate: "2025-09-30T12:34:56Z"

    # Accounts & funds
    Account:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        currency:
          type: string
        balance:
          type: number
          format: double
        available:
          type: number
          format: double
        reserved:
          type: number
          format: double
        margin:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
      example:
        id: "acct-0001"
        userId: "11111111-aaaa-4444-bbbb-222222222222"
        currency: "EUR"
        balance: 10000.50
        available: 8000.50
        reserved: 2000.00
        margin: 0.0
        createdAt: "2025-09-30T12:00:00Z"

    DepositRequest:
      type: object
      required: [accountId, amount, method]
      properties:
        accountId:
          type: string
        amount:
          type: number
        currency:
          type: string
        method:
          type: string
          enum: [bank_transfer, card, paypal, skrill]
        reference:
          type: string

    WithdrawalRequest:
      type: object
      required: [accountId, amount, destination]
      properties:
        accountId:
          type: string
        amount:
          type: number
        currency:
          type: string
        destination:
          type: string
          description: "E.g. bank_account:IBAN (must be a verified destination)"

    DepositResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [pending, completed, failed]
      example:
        id: "dep-1234"
        status: "pending"

    WithdrawalResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, rejected]
      example:
        id: "wd-5678"
        status: "pending"

    Order:
      type: object
      required: [accountId, symbol, side, quantity, orderType]
      properties:
        id:
          type: string
        accountId:
          type: string
        symbol:
          type: string
          description: Market symbol, e.g. AAPL, VOW3.DE
        side:
          type: string
          enum: [buy, sell]
        quantity:
          type: number
        orderType:
          type: string
          enum: [market, limit, stop, oco]
        price:
          type: number
        stopPrice:
          type: number
        timeInForce:
          type: string
          enum: [GTC, IOC, FOK]
        status:
          type: string
          enum: [pending, working, filled, partially_filled, cancelled, rejected]
        filledQuantity:
          type: number
        avgPrice:
          type: number
        createdAt:
          type: string
          format: date-time
      example:
        id: "ord-0001"
        accountId: "acct-0001"
        symbol: "AAPL"
        side: "buy"
        quantity: 10
        orderType: "limit"
        price: 150.00
        timeInForce: "GTC"
        status: "working"
        filledQuantity: 0
        avgPrice: 0
        createdAt: "2025-09-30T12:05:00Z"

    OrderCreateRequest:
      type: object
      required: [accountId, symbol, side, quantity, orderType]
      properties:
        accountId:
          type: string
        symbol:
          type: string
        side:
          type: string
          enum: [buy, sell]
        quantity:
          type: number
        orderType:
          type: string
          enum: [market, limit, stop, oco]
        price:
          type: number
        stopPrice:
          type: number
        timeInForce:
          type: string
          enum: [GTC, IOC, FOK]

    OrderListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Order'

    OrderCancelResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
      example:
        id: "ord-0001"
        status: "cancelled"

    MarketQuote:
      type: object
      properties:
        symbol:
          type: string
        bid:
          type: number
        ask:
          type: number
        last:
          type: number
        open:
          type: number
        high:
          type: number
        low:
          type: number
        timestamp:
          type: string
          format: date-time
        venue:
          type: string
      example:
        symbol: "AAPL"
        bid: 149.95
        ask: 150.05
        last: 150.00
        open: 148.00
        high: 151.00
        low: 147.50
        timestamp: "2025-09-30T12:06:00Z"
        venue: "NASDAQ"

    Fee:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        rate:
          type: number
        minAmount:
          type: number

    Position:
      type: object
      properties:
        symbol:
          type: string
        quantity:
          type: number
        avgPrice:
          type: number
        unrealizedPnl:
          type: number
        realizedPnl:
          type: number
        marketValue:
          type: number
      example:
        symbol: "AAPL"
        quantity: 50
        avgPrice: 120.00
        unrealizedPnl: 1500.00
        realizedPnl: 200.00
        marketValue: 7500.00

    PositionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Position'

    Transaction:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        type:
          type: string
          enum: [trade, deposit, withdrawal, fee, dividend]
        amount:
          type: number
        currency:
          type: string
        details:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
      example:
        id: "tx-0001"
        accountId: "acct-0001"
        type: "trade"
        amount: -1500.00
        currency: "EUR"
        details:
          symbol: "AAPL"
          side: "buy"
          quantity: 10
          price: 150.00
        createdAt: "2025-09-30T12:07:00Z"

    TransactionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'

    ReportRequest:
      type: object
      properties:
        accountId:
          type: string
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
        format:
          type: string
          enum: [pdf, csv, xml]

    ReportJobResponse:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
          enum: [pending, completed, failed]
        downloadUrl:
          type: string
      example:
        jobId: "report-123"
        status: "pending"
        downloadUrl: "https://sandbox.example-broker.com/reports/report-123.pdf"

    SuspiciousRecord:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        amount:
          type: number
        reason:
          type: string
        detectedAt:
          type: string
          format: date-time

    AuditLog:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        action:
          type: string
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time

    Limits:
      type: object
      properties:
        maxOrderSize:
          type: number
        dailyTradeLimit:
          type: number
        marginRequirement:
          type: number
        leverage:
          type: string
      example:
        maxOrderSize: 100000
        dailyTradeLimit: 1000000
        marginRequirement: 0.25
        leverage: "4:1"

    WebhookOrderExecuted:
      type: object
      required: [orderId, filledQuantity, avgPrice]
      properties:
        orderId:
          type: string
        filledQuantity:
          type: number
        avgPrice:
          type: number
        executedAt:
          type: string
          format: date-time

  examples:
    RegisterExample:
      value:
        firstName: "Jan"
        lastName: "Novak"
        email: "jan.novak@example.com"
        password: "S3cur3P@ss!"
        country: "CZ"
        accountType: "retail"
    MarketOrderExample:
      value:
        accountId: "acct-0001"
        symbol: "AAPL"
        side: "buy"
        quantity: 10
        orderType: "market"
    ErrorExample:
      value:
        code: invalid_request
        message: "Invalid payload"
        details:
          field: "email"
          reason: "missing"

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: "Register a new user"
      description: "Create a new user account. Email verification and KYC follow."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              register:
                $ref: '#/components/examples/RegisterExample'
      responses:
        '201':
          description: "User created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                userCreated:
                  value:
                    id: "11111111-aaaa-4444-bbbb-222222222222"
                    firstName: "Jan"
                    lastName: "Novak"
                    email: "jan.novak@example.com"
                    kycStatus: "not_submitted"
                    createdAt: "2025-09-30T12:00:00Z"
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  $ref: '#/components/examples/ErrorExample'

  /auth/login:
    post:
      tags: [Auth]
      summary: "Login with email and password"
      description: "Returns access and refresh tokens. If 2FA is enabled, response may indicate required 2FA."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "Authentication successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                authSuccess:
                  value:
                    accessToken: "eyJhbGciOi..."
                    refreshToken: "rftok_abcdef..."
                    expiresIn: 3600
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    code: "invalid_credentials"
                    message: "Email or password is incorrect"

  /auth/refresh:
    post:
      tags: [Auth]
      summary: "Refresh access token"
      description: "Exchange refresh token for a new access token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: "New tokens"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/2fa/setup:
    post:
      tags: [Auth]
      summary: "Setup two-factor authentication"
      description: "Enable 2FA method (sms/email/authenticator) for a user."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFARequest'
      responses:
        '200':
          description: "2FA setup initiated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  method:
                    type: string
                  message:
                    type: string
              examples:
                smsSetup:
                  value:
                    userId: "11111111-aaaa-4444-bbbb-222222222222"
                    method: "sms"
                    message: "SMS with OTP sent to +420601234567"

  /auth/2fa/verify:
    post:
      tags: [Auth]
      summary: "Verify two-factor code"
      description: "Verify an OTP code to complete 2FA login or setup."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFAVerifyRequest'
      responses:
        '200':
          description: "2FA verified"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
              examples:
                ok:
                  value:
                    success: true
        '400':
          description: "Invalid code"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: "Initiate password reset"
      description: "Sends password reset link or token to user's email."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: "Password reset initiated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                ok:
                  value:
                    message: "Password reset email sent if account exists."

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: "Reset password"
      description: "Complete password reset using token from email."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: "Password reset successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                ok:
                  value:
                    message: "Password has been reset."

  /users/{userId}:
    get:
      tags: [Users]
      summary: "Get user profile"
      description: "Retrieve user profile information."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "User profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags: [Users]
      summary: "Update user profile"
      description: "Update profile fields (phone, country, etc.)."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                country:
                  type: string
      responses:
        '200':
          description: "Profile updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}/kyc:
    post:
      tags: [Users]
      summary: "Submit KYC documents"
      description: "Upload identity documents or request video identification."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/KYCSubmission'
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: "KYC submission accepted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCStatusResponse'
              examples:
                accepted:
                  value:
                    kycStatus: pending
                    lastUpdate: "2025-09-30T12:10:00Z"
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Users]
      summary: "Get KYC status"
      description: "Return current KYC status for the user."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "KYC status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCStatusResponse'

  /accounts:
    get:
      tags: [Accounts]
      summary: "List accounts for authenticated user"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "List of accounts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              examples:
                example:
                  value:
                    - id: "acct-0001"
                      currency: "EUR"
                      balance: 10000.5
                    - id: "acct-0002"
                      currency: "USD"
                      balance: 5000.0

    post:
      tags: [Accounts]
      summary: "Create a trading account"
      description: "Create a new trading account in specified currency."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currency]
              properties:
                currency:
                  type: string
      responses:
        '201':
          description: "Account created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

  /accounts/{accountId}/balance:
    get:
      tags: [Accounts]
      summary: "Get account balance and available funds"
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Account balance"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

  /accounts/{accountId}/limits:
    get:
      tags: [Accounts]
      summary: "Get trading limits for an account"
      description: "Return limits and margin requirements for the account."
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Limits"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
              examples:
                limits:
                  value:
                    maxOrderSize: 100000
                    dailyTradeLimit: 1000000
                    marginRequirement: 0.25
                    leverage: "4:1"

  /deposits:
    post:
      tags: [Accounts]
      summary: "Create deposit request"
      description: "Request deposit (bank transfer, card, e-wallet)."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '201':
          description: "Deposit created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositResponse'

  /withdrawals:
    post:
      tags: [Accounts]
      summary: "Create withdrawal request"
      description: "Withdraw funds to a verified destination."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalRequest'
      responses:
        '201':
          description: "Withdrawal created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawalResponse'
        '403':
          description: "Withdrawal to unverified destination"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    post:
      tags: [Orders]
      summary: "Create a new order (market, limit, stop, oco)"
      description: "Place an order for execution. OCO is represented by a group of linked orders in the body."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
            examples:
              market:
                $ref: '#/components/examples/MarketOrderExample'
      responses:
        '201':
          description: "Order created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                created:
                  value:
                    id: "ord-0001"
                    accountId: "acct-0001"
                    symbol: "AAPL"
                    side: "buy"
                    quantity: 10
                    orderType: "market"
                    status: "filled"
                    filledQuantity: 10
                    avgPrice: 150.00
                    createdAt: "2025-09-30T12:08:00Z"
        '400':
          description: "Invalid order parameters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Orders]
      summary: "List orders"
      description: "Filter orders by account, status or symbol."
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, working, filled, partially_filled, cancelled, rejected]
        - name: symbol
          in: query
          schema:
            type: string
      responses:
        '200':
          description: "Orders list"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
              examples:
                orders:
                  value:
                    - id: "ord-0001"
                      accountId: "acct-0001"
                      symbol: "AAPL"
                      side: "buy"
                      quantity: 10
                      orderType: "limit"
                      price: 150.0
                      status: "working"
                    - id: "ord-0002"
                      accountId: "acct-0001"
                      symbol: "GOOG"
                      side: "sell"
                      quantity: 2
                      orderType: "market"
                      status: "filled"

  /orders/{orderId}:
    get:
      tags: [Orders]
      summary: "Get order details"
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Order details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                detail:
                  value:
                    id: "ord-0001"
                    accountId: "acct-0001"
                    symbol: "AAPL"
                    side: "buy"
                    quantity: 10
                    orderType: "limit"
                    price: 150.0
                    status: "working"
        '404':
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Orders]
      summary: "Cancel an order"
      description: "Cancel an order if rules allow (not filled or already cancelled)."
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Order cancelled"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCancelResponse'
        '409':
          description: "Cannot cancel (already filled)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /markets:
    get:
      tags: [Markets]
      summary: "List supported markets and exchanges"
      responses:
        '200':
          description: "Markets list"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    timezone:
                      type: string
                    open:
                      type: string
                    close:
                      type: string
              examples:
                example:
                  value:
                    - id: "NASDAQ"
                      name: "NASDAQ"
                      timezone: "America/New_York"
                      open: "09:30"
                      close: "16:00"
                    - id: "LSE"
                      name: "London Stock Exchange"
                      timezone: "Europe/London"
                      open: "08:00"
                      close: "16:30"

  /markets/{symbol}/quote:
    get:
      tags: [Markets]
      summary: "Get current market quote for a symbol"
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Market quote"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketQuote'
              examples:
                aapl:
                  $ref: '#/components/schemas/MarketQuote'

  /accounts/{accountId}/positions:
    get:
      tags: [Portfolio]
      summary: "Get open positions for an account"
      description: "Return list of current open positions and P&L."
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Positions list"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionsResponse'
              examples:
                positions:
                  value:
                    - symbol: "AAPL"
                      quantity: 50
                      avgPrice: 120.00
                      unrealizedPnl: 1500.00
                      marketValue: 7500.00

  /transactions:
    get:
      tags: [Transactions]
      summary: "Get transaction history"
      description: "Filter by account, date range and type."
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
        - name: type
          in: query
          schema:
            type: string
            enum: [trade, deposit, withdrawal, fee, dividend]
      responses:
        '200':
          description: "Transactions"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
              examples:
                txs:
                  value:
                    - id: "tx-0001"
                      accountId: "acct-0001"
                      type: "trade"
                      amount: -1500.00
                      currency: "EUR"
                      details:
                        symbol: "AAPL"
                        side: "buy"
                        quantity: 10
                        price: 150.00
                      createdAt: "2025-09-30T12:07:00Z"
                    - id: "tx-0002"
                      accountId: "acct-0001"
                      type: "deposit"
                      amount: 10000.50
                      currency: "EUR"
                      createdAt: "2025-09-30T11:50:00Z"

  /fees:
    get:
      tags: [Accounts]
      summary: "Get fees and commission schedule"
      responses:
        '200':
          description: "Fees list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
              examples:
                fees:
                  value:
                    - code: "trade_commission"
                      description: "Commission per trade"
                      rate: 0.001
                      minAmount: 1.0

  /reports:
    post:
      tags: [Reports]
      summary: "Generate account report"
      description: "Request generation of account statement or tax report. Asynchronous job returns jobId."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
      responses:
        '202':
          description: "Report job accepted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportJobResponse'

  /notifications:
    get:
      tags: [Notifications]
      summary: "Get user notifications"
      description: "List unread and read notifications (order executed, margin call, messages)."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Notifications list"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    message:
                      type: string
                    read:
                      type: boolean
                    createdAt:
                      type: string
                      format: date-time
              examples:
                notificationExample:
                  value:
                    - id: "n-1"
                      type: "order_executed"
                      message: "Order ord-0001 executed"
                      read: false
                      createdAt: "2025-09-30T12:08:05Z"

  /admin/users:
    get:
      tags: [Admin]
      summary: "List all users (admin)"
      description: "Administrative endpoint to search and manage users."
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        '200':
          description: "Users list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /admin/users/{userId}/block:
    post:
      tags: [Admin]
      summary: "Block or unblock a user"
      description: "Admin can block (suspend) or unblock a user's account."
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action:
                  type: string
                  enum: [block, unblock]
      responses:
        '200':
          description: "Action applied"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  action:
                    type: string
              examples:
                blocked:
                  value:
                    userId: "11111111-aaaa-4444-bbbb-222222222222"
                    action: "block"

  /admin/compliance/suspicious:
    get:
      tags: [Admin]
      summary: "List suspicious transactions"
      description: "Return flagged transactions for AML review."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Suspicious records"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuspiciousRecord'

  /admin/audit/logs:
    get:
      tags: [Admin]
      summary: "Get audit logs"
      description: "Administrative audit logs for system actions."
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: "Audit logs"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'

  /webhooks/order-executed:
    post:
      tags: [Webhooks]
      summary: "Webhook: order executed"
      description: "Called by exchange/clearing to inform about order fills."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookOrderExecuted'
      responses:
        '200':
          description: "Accepted"

  # Websocket / streaming info (informative)
  /stream/info:
    get:
      tags: [Markets]
      summary: "Get websocket streaming endpoints"
      description: "Returns WebSocket URLs and capabilities for real-time market data (informational)."
      responses:
        '200':
          description: "Stream info"
          content:
            application/json:
              schema:
                type: object
                properties:
                  wsUrl:
                    type: string
                  supports:
                    type: array
                    items:
                      type: string
              examples:
                stream:
                  value:
                    wsUrl: "wss://stream.example-broker.com"
                    supports: ["quotes", "order_updates", "portfolio_updates"]

  /health:
    get:
      tags: [Admin]
      summary: "System health check"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              examples:
                ok:
                  value:
                    status: "ok"


